import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';
import '../../services/transaction_service.dart';
import '../../models/transaction_model.dart';
import '../../models/bank_account_model.dart';
import '../../services/bank_account_service.dart';
import '../../theme/app_colors.dart';

class AddTransactionScreen extends StatefulWidget {
  final String? accountId;
  const AddTransactionScreen({super.key, this.accountId});
  @override State<AddTransactionScreen> createState() => _AddTransactionScreenState();
}

class _AddTransactionScreenState extends State<AddTransactionScreen> {
  final _formKey = GlobalKey<FormState>();
  final _descriptionController = TextEditingController();
  final _amountController = TextEditingController();
  final _recipientAccountController = TextEditingController();
  
  TransactionType _selectedType = TransactionType.deposit;
  String? _selectedAccountId;
  List<BankAccount> _accounts = [];
  bool _isLoading = true;
  bool _isSubmitting = false;
  
  final List<Map<String, dynamic>> _transactionTypes = [
    {'type': TransactionType.deposit, 'label': 'Deposit', 'icon': Icons.arrow_downward},
    {'type': TransactionType.withdrawal, 'label': 'Withdrawal', 'icon': Icons.arrow_upward},
    {'type': TransactionType.transfer, 'label': 'Transfer', 'icon': Icons.swap_horiz},
  ];

  @override void initState() {
    super.initState();
    _loadAccounts();
  }

  @override void dispose() {
    _descriptionController.dispose();
    _amountController.dispose();
    _recipientAccountController.dispose();
    super.dispose();
  }

  Color _getTransactionTypeColor(TransactionType type) {
    switch (type) {
      case TransactionType.deposit: return AppColors.deposit;
      case TransactionType.withdrawal: return AppColors.withdrawal;
      case TransactionType.transfer: return AppColors.transfer;
      default: return AppColors.primary;
    }
  }

  Future<void> _loadAccounts() async {
    try {
      final accountService = Provider.of<BankAccountService>(context, listen: false);
      final accounts = await accountService.getBankAccounts();
      setState(() {
        _accounts = accounts;
        if (widget.accountId != null) _selectedAccountId = widget.accountId;
        else if (_accounts.isNotEmpty) _selectedAccountId = _accounts.first.id;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load accounts: $e')),
        );
      }
    }
  }

  void _showAccountSelection() {
    if (_accounts.isEmpty) return;
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: Text('Select Account', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            ),
            const Divider(height: 1),
            Expanded(
              child: ListView.builder(
                itemCount: _accounts.length,
                itemBuilder: (context, index) {
                  final account = _accounts[index];
                  return ListTile(
                    title: Text('${account.accountHolderName} ••••${account.accountNumber.substring(account.accountNumber.length - 4)}'),
                    subtitle: Text(account.bankName),
                    trailing: account.id == _selectedAccountId ? const Icon(Icons.check, color: Colors.green) : null,
                    onTap: () {
                      setState(() => _selectedAccountId = account.id);
                      Navigator.pop(context);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;
    if (_selectedAccountId == null) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please select an account')));
      return;
    }

    setState(() => _isSubmitting = true);
    try {
      final now = DateTime.now();
      final transaction = TransactionModel(
        id: const Uuid().v4(),
        accountId: _selectedAccountId!,
        amount: _selectedType == TransactionType.withdrawal 
            ? -double.parse(_amountController.text) 
            : double.parse(_amountController.text),
        description: _descriptionController.text,
        type: _selectedType,
        date: now,
        createdAt: now,
        updatedAt: now,
      );
      await Provider.of<TransactionService>(context, listen: false).addTransaction(transaction);
      if (mounted) Navigator.pop(context, true);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add transaction: $e')),
        );
      }
    } finally {
      if (mounted) setState(() => _isSubmitting = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final textTheme = Theme.of(context).textTheme;
    
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: const Text('New Transaction', style: TextStyle(fontWeight: FontWeight.w600)),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        foregroundColor: AppColors.textPrimary,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : GestureDetector(
              onTap: () => FocusScope.of(context).unfocus(),
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Transaction Type Card
                      Card(
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.grey.shade200, width: 1),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'TRANSACTION TYPE',
                                style: textTheme.labelLarge?.copyWith(
                                  color: AppColors.textSecondary,
                                  fontWeight: FontWeight.w600,
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 12),
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                                decoration: BoxDecoration(
                                  color: AppColors.background,
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(color: AppColors.border, width: 1.5),
                                ),
                                child: DropdownButtonHideUnderline(
                                  child: DropdownButton<TransactionType>(
                                    value: _selectedType,
                                    isExpanded: true,
                                    icon: const Icon(Icons.keyboard_arrow_down_rounded, color: AppColors.textSecondary),
                                    style: const TextStyle(fontSize: 16, color: AppColors.textPrimary, fontWeight: FontWeight.w500),
                                    items: _transactionTypes.map((type) {
                                      return DropdownMenuItem<TransactionType>(
                                        value: type['type'] as TransactionType,
                                        child: Row(
                                          children: [
                                            Icon(
                                              type['icon'] as IconData, 
                                              color: _getTransactionTypeColor(type['type'] as TransactionType),
                                              size: 22,
                                            ),
                                            const SizedBox(width: 12),
                                            Text(type['label'] as String, style: const TextStyle(fontSize: 15)),
                                          ],
                                        ),
                                      );
                                    }).toList(),
                                    onChanged: (value) {
                                      if (value != null) setState(() => _selectedType = value);
                                    },
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      // Account Selection Card
                      Card(
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.grey.shade200, width: 1),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'FROM ACCOUNT',
                                style: textTheme.labelLarge?.copyWith(
                                  color: AppColors.textSecondary,
                                  fontWeight: FontWeight.w600,
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 12),
                              GestureDetector(
                                onTap: _showAccountSelection,
                                child: AbsorbPointer(
                                  child: TextFormField(
                                    decoration: InputDecoration(
                                      hintText: 'Select Account',
                                      hintStyle: TextStyle(color: Colors.grey.shade400, fontSize: 15),
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(10),
                                        borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(10),
                                        borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(10),
                                        borderSide: const BorderSide(color: AppColors.primary, width: 1.5),
                                      ),
                                      filled: true,
                                      fillColor: AppColors.background,
                                      suffixIcon: const Icon(Icons.arrow_drop_down, size: 28, color: AppColors.textSecondary),
                                      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                                    ),
                                    controller: TextEditingController(
                                      text: _selectedAccountId != null && _accounts.isNotEmpty
                                          ? _accounts.firstWhere((a) => a.id == _selectedAccountId).accountHolderName
                                          : 'Select an account',
                                    ),
                                    style: const TextStyle(fontSize: 15, fontWeight: FontWeight.w500, color: AppColors.textPrimary),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      
                      const SizedBox(height: 16),
                      
                      // Transaction Details Card
                      Card(
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.grey.shade200, width: 1),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'TRANSACTION DETAILS',
                                style: textTheme.labelLarge?.copyWith(
                                  color: AppColors.textSecondary,
                                  fontWeight: FontWeight.w600,
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 16),
                              
                              // Amount Field
                              TextFormField(
                                controller: _amountController,
                                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: AppColors.textPrimary),
                                decoration: InputDecoration(
                                  labelText: 'Amount',
                                  labelStyle: TextStyle(color: AppColors.textSecondary, fontSize: 14),
                                  prefixText: '₹ ',
                                  prefixStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: AppColors.textPrimary),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(color: AppColors.primary, width: 1.5),
                                  ),
                                  filled: true,
                                  fillColor: AppColors.background,
                                  contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                                ),
                                keyboardType: TextInputType.numberWithOptions(decimal: true),
                                validator: (value) {
                                  if (value == null || value.isEmpty) return 'Please enter an amount';
                                  if (double.tryParse(value) == null) return 'Please enter a valid number';
                                  if (double.parse(value) <= 0) return 'Amount must be greater than zero';
                                  return null;
                                },
                              ),
                              
                              const SizedBox(height: 16),
                              
                              // Description Field
                              TextFormField(
                                controller: _descriptionController,
                                style: const TextStyle(fontSize: 16, color: AppColors.textPrimary),
                                decoration: InputDecoration(
                                  labelText: 'Description',
                                  labelStyle: TextStyle(color: AppColors.textSecondary, fontSize: 14),
                                  hintText: 'Enter a description (optional)',
                                  hintStyle: TextStyle(color: Colors.grey.shade400, fontSize: 14),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(color: AppColors.primary, width: 1.5),
                                  ),
                                  filled: true,
                                  fillColor: AppColors.background,
                                  contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                                ),
                                maxLines: 3,
                              ),
                              
                              // Recipient Account (for transfers)
                              if (_selectedType == TransactionType.transfer) ...[
                                const SizedBox(height: 16),
                                TextFormField(
                                  controller: _recipientAccountController,
                                  style: const TextStyle(fontSize: 16, color: AppColors.textPrimary),
                                  decoration: InputDecoration(
                                    labelText: 'Recipient Account Number',
                                    labelStyle: TextStyle(color: AppColors.textSecondary, fontSize: 14),
                                    hintText: 'Enter recipient account number',
                                    hintStyle: TextStyle(color: Colors.grey.shade400, fontSize: 14),
                                    border: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(10),
                                      borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                    ),
                                    enabledBorder: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(10),
                                      borderSide: BorderSide(color: Colors.grey.shade300, width: 1.5),
                                    ),
                                    focusedBorder: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(10),
                                      borderSide: const BorderSide(color: AppColors.primary, width: 1.5),
                                    ),
                                    filled: true,
                                    fillColor: AppColors.background,
                                    contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                                    prefixIcon: const Icon(Icons.account_balance, color: AppColors.textSecondary, size: 20),
                                  ),
                                  keyboardType: TextInputType.number,
                                  validator: (value) {
                                    if (_selectedType == TransactionType.transfer && (value == null || value.isEmpty)) {
                                      return 'Please enter recipient account number';
                                    }
                                    return null;
                                  },
                                ),
                              ],
                            ],
                          ),
                        ),
                      ),
                      
                      const SizedBox(height: 24),
                      
                      // Submit Button
                      SizedBox(
                        width: double.infinity,
                        height: 56,
                        child: ElevatedButton(
                          onPressed: _isSubmitting ? null : _submitForm,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.primary,
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 0,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                          child: _isSubmitting
                              ? const SizedBox(
                                  width: 24,
                                  height: 24,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                  ),
                                )
                              : const Text(
                                  'Submit Transaction',
                                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                                ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }
}
